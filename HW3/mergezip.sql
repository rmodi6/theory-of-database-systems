-- Create temporary output table --
DROP TABLE CSE532.MERGED_ZIPCODES@
CREATE TABLE CSE532.MERGED_ZIPCODES
(
    MERGE_ID  INTEGER NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    ZIPCODE   VARCHAR(5),
    TOTAL_POP DOUBLE
)@

-- Insert initial data into output table --
INSERT INTO CSE532.MERGED_ZIPCODES (ZIPCODE, TOTAL_POP)
    (
        select RIGHT(CONCAT('00', ZIP), 5), ZPOP
        from CSE532.ZIPPOP
        where ZPOP > 0
    )@


-- Create stored procedure --
CREATE OR REPLACE PROCEDURE CSE532.merge_zip(IN zips_limit INTEGER)
    LANGUAGE SQL
    DYNAMIC RESULT SETS 1

BEGIN

    -- Create variables --
    DECLARE avg_zpop DOUBLE;
    DECLARE new_zpop DOUBLE;
    DECLARE curr_id INTEGER;

    -- Create cursor to return result set to the caller --
    DECLARE cOutput CURSOR WITH RETURN TO CALLER FOR
        SELECT * FROM CSE532.MERGED_ZIPCODES;

    -- Compute average population per zipcode --
    SET avg_zpop = (SELECT AVG(ZPOP) FROM CSE532.ZIPPOP);

    -- Iterate over zipcodes with population less than average population --
    FOR v1 AS c1 CURSOR WITH HOLD FOR
        SELECT RIGHT(CONCAT('00', ZIP), 5) as curr_zip
        FROM CSE532.ZIPPOP
        WHERE ZPOP > 0
          AND ZPOP < avg_zpop
        ORDER BY ZIP
        LIMIT zips_limit
        DO
            -- For each zipcode having population less than average population --
            SET (curr_id, new_zpop) = (SELECT MERGE_ID, TOTAL_POP FROM CSE532.MERGED_ZIPCODES WHERE ZIPCODE = curr_zip);
            -- Iterate over its neighboring zipcodes --
            FOR v2 AS c2 CURSOR WITH HOLD FOR
                SELECT C.ZCTA5CE10 AS neighbor_zip, D.MERGE_ID AS neighbor_id, D.TOTAL_POP AS neighbor_zpop
                FROM CSE532.USZIP A
                         INNER JOIN CSE532.USZIP C
                                    ON A.ZCTA5CE10 = curr_zip AND DB2GSE.ST_Intersects(A.SHAPE, C.SHAPE) = 1 AND
                                       A.ZCTA5CE10 != C.ZCTA5CE10
                         INNER JOIN CSE532.MERGED_ZIPCODES D ON C.ZCTA5CE10 = D.ZIPCODE
                ORDER BY D.TOTAL_POP DESC
                DO -- For each neighbor
                    IF new_zpop < avg_zpop THEN -- Merge zipcodes until total population exceeds average
                        SET new_zpop = new_zpop + neighbor_zpop;
                        UPDATE CSE532.MERGED_ZIPCODES SET MERGE_ID = neighbor_id WHERE MERGE_ID = curr_id;
                        UPDATE CSE532.MERGED_ZIPCODES SET TOTAL_POP = new_zpop WHERE MERGE_ID = neighbor_id;
                        SET curr_id = neighbor_id;
                    END IF;
                END FOR;
            COMMIT;
        END FOR;

    OPEN cOutput; -- Open cursor to return result set to the caller
    RETURN 0;

END@

-- Call the stored procedure --
CALL CSE532.merge_zip(100)@

-- Clean up --
DROP TABLE CSE532.MERGED_ZIPCODES@